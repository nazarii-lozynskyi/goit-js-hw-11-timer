{"version":3,"sources":["js/countdownTimer(class).js"],"names":["CountdownTimer","constructor","selector","targetDate","onTick","isActive","intervalId","selectorTimer","document","querySelector","console","log","days","children","hours","mins","secs","timer","timeFromTheFuture","getTime","setInterval","startTime","Date","now","deltaTime","time","getTimeComponents","pad","Math","floor","value","String","padStart","updateClockFace","textContent","countdown"],"mappings":";AAAA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAC7BA,KAAAA,OAASA,EACTC,KAAAA,UAAW,EACXC,KAAAA,WAAa,KAEbH,KAAAA,WAAaA,EACbI,KAAAA,cAAgBC,SAASC,cAAcP,GAE5CQ,QAAQC,IAAI,KAAKJ,eAEZK,KAAAA,KAAO,KAAKL,cAAcM,SAAS,GAAGA,SAAS,GAC/CC,KAAAA,MAAQ,KAAKP,cAAcM,SAAS,GAAGA,SAAS,GAChDE,KAAAA,KAAO,KAAKR,cAAcM,SAAS,GAAGA,SAAS,GAC/CG,KAAAA,KAAO,KAAKT,cAAcM,SAAS,GAAGA,SAAS,GAGtDI,QACM,GAAA,KAAKZ,SACP,OAEIa,MAAAA,EAAoB,KAAKf,WAAWgB,UAErCb,KAAAA,WAAac,YAAY,KACtBC,MAAAA,EAAYC,KAAKC,MACjBC,EAAYN,EAAoBG,EAChCI,EAAO,KAAKC,kBAAkBF,GAE/BpB,KAAAA,OAAOqB,IACX,KAGLC,kBAAkBD,GA4BT,MAAA,CAAEb,KAvBI,KAAKe,IAAIC,KAAKC,MAAMJ,EAAQ,QAuB1BX,MAhBD,KAAKa,IACjBC,KAAKC,MAAOJ,EAAQ,MAAyB,OAezBV,KART,KAAKY,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAQlCT,KAFf,KAAKW,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAK1DE,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,SAASC,GAAgB,KAAErB,EAAF,MAAQE,EAAR,KAAeC,EAAf,KAAqBC,IACvCJ,KAAAA,KAAKsB,eAAiBtB,IACtBE,KAAAA,MAAMoB,eAAiBpB,IACvBC,KAAAA,KAAKmB,eAAiBnB,IACtBC,KAAAA,KAAKkB,eAAiBlB,IAG7B,MAAMmB,EAAY,IAAInC,EAAe,CACnCE,SAAU,WACVC,WAAY,IAAImB,KAAK,iBACrBlB,OAAQ6B,IAGVE,EAAUlB","file":"countdownTimer(class).c25bee35.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate, onTick }) {\n    this.onTick = onTick;\n    this.isActive = false;\n    this.intervalId = null;\n\n    this.targetDate = targetDate;\n    this.selectorTimer = document.querySelector(selector);\n\n    console.log(this.selectorTimer);\n\n    this.days = this.selectorTimer.children[0].children[0];\n    this.hours = this.selectorTimer.children[1].children[0];\n    this.mins = this.selectorTimer.children[2].children[0];\n    this.secs = this.selectorTimer.children[3].children[0];\n  }\n\n  timer() {\n    if (this.isActive) {\n      return;\n    }\n    const timeFromTheFuture = this.targetDate.getTime();\n\n    this.intervalId = setInterval(() => {\n      const startTime = Date.now();\n      const deltaTime = timeFromTheFuture - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    /*\n   Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n    миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n   */\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n    /*\n    Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n    остатка % и делим его на количество миллисекунд в одном часе\n    (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n   */\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n\n    /*\n    Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n    миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n   */\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n    /*\n    Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n    миллисекунд в одной секунде (1000)\n   */\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nfunction updateClockFace({ days, hours, mins, secs }) {\n  this.days.textContent = `${days}`;\n  this.hours.textContent = `${hours}`;\n  this.mins.textContent = `${mins}`;\n  this.secs.textContent = `${secs}`;\n}\n\nconst countdown = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('June 14, 2022'),\n  onTick: updateClockFace,\n});\n\ncountdown.timer();\n"]}