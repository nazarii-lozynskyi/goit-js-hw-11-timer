{"version":3,"sources":["js/js.js"],"names":["CountdownTimer","constructor","selector","targetDate","selectorTimer","document","querySelector","console","log","daysText","children","hoursText","minsText","secsText","timer","timeFromTheFuture","getTime","setInterval","startTime","Date","now","deltaTime","days","Math","floor","hours","mins","secs","textContent","countdown"],"mappings":";AAAA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBA,KAAAA,WAAaA,EACbC,KAAAA,cAAgBC,SAASC,cAAcJ,GAE5CK,QAAQC,IAAI,KAAKJ,eAEZK,KAAAA,SAAW,KAAKL,cAAcM,SAAS,GAAGA,SAAS,GACnDC,KAAAA,UAAY,KAAKP,cAAcM,SAAS,GAAGA,SAAS,GACpDE,KAAAA,SAAW,KAAKR,cAAcM,SAAS,GAAGA,SAAS,GACnDG,KAAAA,SAAW,KAAKT,cAAcM,SAAS,GAAGA,SAAS,GAG1DI,QACQC,MAAAA,EAAoB,KAAKZ,WAAWa,UAE1CC,YAAY,KACJC,MAAAA,EAAYC,KAAKC,MACjBC,EAAYN,EAAoBG,EAMhCI,EAAOC,KAAKC,MAAMH,EAAa,OAO/BI,EAAQF,KAAKC,MAChBH,EAAa,MAAyB,MAOnCK,EAAOH,KAAKC,MAAOH,EAAa,KAAoB,KAMpDM,EAAOJ,KAAKC,MAAOH,EAAa,IAAc,KAsB5C,OApBJC,EAAO,KACJb,KAAAA,SAASmB,gBAAkBN,KAE7Bb,KAAAA,SAASmB,YAAcN,EAExBG,EAAQ,KACLd,KAAAA,UAAUiB,gBAAkBH,KAE9Bd,KAAAA,UAAUiB,YAAcH,EAEzBC,EAAO,KACJd,KAAAA,SAASgB,gBAAkBF,KAE7Bd,KAAAA,SAASgB,YAAcF,EAExBC,EAAO,KACJd,KAAAA,SAASe,gBAAkBD,KAE7Bd,KAAAA,SAASe,YAAcD,KAElBL,KAAQG,KAASC,KAAQC,KAClC,MAIP,MAAME,EAAY,IAAI7B,EAAe,CACnCE,SAAU,WACVC,WAAY,IAAIgB,KAAK,mBAGvBU,EAAUf","file":"js.8b0a9288.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.targetDate = targetDate;\n    this.selectorTimer = document.querySelector(selector);\n\n    console.log(this.selectorTimer);\n\n    this.daysText = this.selectorTimer.children[0].children[0];\n    this.hoursText = this.selectorTimer.children[1].children[0];\n    this.minsText = this.selectorTimer.children[2].children[0];\n    this.secsText = this.selectorTimer.children[3].children[0];\n  }\n\n  timer() {\n    const timeFromTheFuture = this.targetDate.getTime();\n\n    setInterval(() => {\n      const startTime = Date.now();\n      const deltaTime = timeFromTheFuture - startTime;\n\n      /*\n   Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n    миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n   */\n      const days = Math.floor(deltaTime / (1000 * 60 * 60 * 24));\n\n      /*\n    Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n    остатка % и делим его на количество миллисекунд в одном часе\n    (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n   */\n      const hours = Math.floor(\n        (deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n\n      /*\n    Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n    миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n   */\n      const mins = Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60));\n\n      /*\n    Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n    миллисекунд в одной секунде (1000)\n   */\n      const secs = Math.floor((deltaTime % (1000 * 60)) / 1000);\n\n      if (days < 10) {\n        this.daysText.textContent = `0${days}`;\n      }\n      this.daysText.textContent = days;\n\n      if (hours < 10) {\n        this.hoursText.textContent = `0${hours}`;\n      }\n      this.hoursText.textContent = hours;\n\n      if (mins < 10) {\n        this.minsText.textContent = `0${mins}`;\n      }\n      this.minsText.textContent = mins;\n\n      if (secs < 10) {\n        this.secsText.textContent = `0${secs}`;\n      }\n      this.secsText.textContent = secs;\n\n      return `${days}:${hours}:${mins}:${secs}`;\n    }, 1000);\n  }\n}\n\nconst countdown = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('June 14, 2022'),\n});\n\ncountdown.timer();\n"]}