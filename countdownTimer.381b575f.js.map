{"version":3,"sources":["js/countdownTimer.js"],"names":["refs","clockFace","document","querySelector","startButton","stopButton","days","hours","mins","secs","inputDay","getElementById","inputMonth","inputYear","writesTheEnteredDay","value","writesTheEnteredMonth","writesTheEnteredYear","onStartButtonClick","countdownTimer","start","inputDate","onStopButtonClick","stop","addEventListener","id","CountdownTimer","constructor","onTick","intervalId","isActive","removeAttribute","setAttribute","setInterval","startTime","Date","now","deltaTime","time","getTimeComponents","clearInterval","pad","Math","floor","String","padStart","selector","targetDate","updateClockFace","textContent"],"mappings":";AAAA,MAAMA,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,YAAaF,SAASC,cAAc,6BACpCE,WAAYH,SAASC,cAAc,4BACnCG,KAAMJ,SAASC,cAAc,uBAC7BI,MAAOL,SAASC,cAAc,wBAC9BK,KAAMN,SAASC,cAAc,uBAC7BM,KAAMP,SAASC,cAAc,uBAC7BO,SAAUR,SAASS,eAAe,OAClCC,WAAYV,SAASS,eAAe,SACpCE,UAAWX,SAASS,eAAe,SAOrC,SAASG,IAGAJ,OAFUV,EAAKU,SAASK,MAKjC,SAASC,IAGAJ,OAFYZ,EAAKY,WAAWG,MAKrC,SAASE,IAGAJ,OAFWb,EAAKa,UAAUE,MA0BnC,SAASG,IACPC,EAAeC,QAEXV,IAAAA,EAAWI,IAMRO,SALUL,OAGgBN,MAFjBO,MAOlB,SAASK,IACPH,EAAeI,OAxDjBvB,EAAKU,SAASc,iBAAiB,SAAUV,GACzCd,EAAKY,WAAWY,iBAAiB,SAAUR,GAC3ChB,EAAKa,UAAUW,iBAAiB,SAAUP,GAgC1CjB,EAAKM,KAAKmB,GAAK,OACfzB,EAAKO,MAAMkB,GAAK,QAChBzB,EAAKQ,KAAKiB,GAAK,OACfzB,EAAKS,KAAKgB,GAAK,OAGfzB,EAAKI,YAAYoB,iBAAiB,QAASN,GAC3ClB,EAAKK,WAAWmB,iBAAiB,QAASF,GAoB1C,MAAMI,EACJC,aAAY,OAAEC,IACPC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EAWhBR,QACM,KAAKU,WAIT9B,EAAKK,WAAW0B,gBAAgB,YAGhC/B,EAAKI,YAAY4B,aAAa,YAAY,GAErCF,KAAAA,UAAW,EAEXD,KAAAA,WAAaI,YAAY,KACtBC,MAAAA,EAAYC,KAAKC,MAEjBC,MAAAA,EADW,IAAIF,KAAKjB,KACKgB,EACzBI,EAAO,KAAKC,kBAAkBF,GAE/BT,KAAAA,OAAOU,IACX,MAGLf,OAEEvB,EAAKI,YAAY2B,gBAAgB,YAEjC/B,EAAKK,WAAW2B,aAAa,YAAY,GAEzCQ,cAAc,KAAKX,YACdC,KAAAA,UAAW,EAEVQ,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BX,KAAAA,OAAOU,GAOdC,kBAAkBD,GA4BT,MAAA,CAAEhC,KAvBI,KAAKmC,IAAIC,KAAKC,MAAML,EAAQ,QAuB1B/B,MAhBD,KAAKkC,IACjBC,KAAKC,MAAOL,EAAQ,MAAyB,OAezB9B,KART,KAAKiC,IAAIC,KAAKC,MAAOL,EAAQ,KAAoB,MAQlC7B,KAFf,KAAKgC,IAAIC,KAAKC,MAAOL,EAAQ,IAAc,OAK1DG,IAAI1B,GACK6B,OAAAA,OAAO7B,GAAO8B,SAAS,EAAG,MAIrC,MAAM1B,EAAiB,IAAIO,EAAe,CACxCoB,SAAU,WACVC,WAAY,IAAIZ,KAAK,iBACrBP,OAAQoB,IAIV,SAASA,GAAgB,KAAE1C,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC5CT,EAAKM,KAAK2C,eAAiB3C,IAC3BN,EAAKO,MAAM0C,eAAiB1C,IAC5BP,EAAKQ,KAAKyC,eAAiBzC,IAC3BR,EAAKS,KAAKwC,eAAiBxC","file":"countdownTimer.381b575f.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  clockFace: document.querySelector('.timer'),\n  startButton: document.querySelector('button[data-action-start]'),\n  stopButton: document.querySelector('button[data-action-stop]'),\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n  inputDay: document.getElementById('day'),\n  inputMonth: document.getElementById('month'),\n  inputYear: document.getElementById('year'),\n};\n\nrefs.inputDay.addEventListener('change', writesTheEnteredDay);\nrefs.inputMonth.addEventListener('change', writesTheEnteredMonth);\nrefs.inputYear.addEventListener('change', writesTheEnteredYear);\n\nfunction writesTheEnteredDay() {\n  const inputDay = refs.inputDay.value;\n  //console.log(inputDay);\n  return inputDay;\n}\n\nfunction writesTheEnteredMonth() {\n  const inputMonth = refs.inputMonth.value;\n  //console.log(inputMonth);\n  return inputMonth;\n}\n\nfunction writesTheEnteredYear() {\n  const inputYear = refs.inputYear.value;\n  //console.log(inputYear);\n  return inputYear;\n}\n\n// function data() {\n//   writesTheEnteredDay();\n//   writesTheEnteredMonth();\n//   writesTheEnteredYear();\n\n//   console.log();\n// }\n//let targetDate = `${inputMonth} ${inputDay}, ${inputYear}`;\n\n//console.log(targetDate);\n\n/* Добавление элементам свойства \"ID\" */\nrefs.days.id = 'days';\nrefs.hours.id = 'hours';\nrefs.mins.id = 'mins';\nrefs.secs.id = 'secs';\n\n/* Добавление слушателя на кнопки \"startButton\" и \"stopButton\"*/\nrefs.startButton.addEventListener('click', onStartButtonClick);\nrefs.stopButton.addEventListener('click', onStopButtonClick);\n\nfunction onStartButtonClick() {\n  countdownTimer.start();\n\n  let inputDay = writesTheEnteredDay();\n  let inputMonth = writesTheEnteredMonth();\n  let inputYear = writesTheEnteredYear();\n\n  let inputDate = `${inputMonth} ${inputDay}, ${inputYear}`;\n  //console.log(`${inputMonth} ${inputDay}, ${inputYear}`);\n  return inputDate;\n}\n\nfunction onStopButtonClick() {\n  countdownTimer.stop();\n}\n\n/* Таймер */\n\nclass CountdownTimer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    //this.init();\n  }\n\n  /* Инициализация таймера */\n  // init() {\n  //   const time = this.getTimeComponents(0);\n  //   this.onTick(time);\n  // }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    /* Кнопка \"stopButton\" активна */\n    refs.stopButton.removeAttribute('disabled');\n\n    /* Кнопка \"startButton\" неактивна */\n    refs.startButton.setAttribute('disabled', true);\n\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const startTime = Date.now();\n      let targetDate = new Date(onStartButtonClick());\n      const deltaTime = targetDate - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    /* Кнопка \"startButton\" активна */\n    refs.startButton.removeAttribute('disabled');\n    /* Кнопка \"stopButton\" неактивна */\n    refs.stopButton.setAttribute('disabled', true);\n\n    clearInterval(this.intervalId);\n    this.isActive = false;\n\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n    // refs.days.textContent = '00';\n    // refs.hours.textContent = '00';\n    // refs.mins.textContent = '00';\n    // refs.secs.textContent = '00';\n  }\n\n  getTimeComponents(time) {\n    /*\n   Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n    миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n   */\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n    /*\n    Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n    остатка % и делим его на количество миллисекунд в одном часе\n    (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n   */\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n\n    /*\n    Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n    миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n   */\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n    /*\n    Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n    миллисекунд в одной секунде (1000)\n   */\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('June 14, 2022'),\n  onTick: updateClockFace,\n});\n\n/* Обновление интерфейса таймера */\nfunction updateClockFace({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\n"]}